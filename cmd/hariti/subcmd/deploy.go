package subcmd

import (
	"bytes"
	"io"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/kamichidu/go-hariti"
	"github.com/urfave/cli"
)

var vimscriptTemplate *template.Template

func init() {
	const templateText = `" Generated by hariti {{.Version}}
" DO NOT EDIT THIS FILE
set runtimepath={{$.DefaultRuntimepath}}
{{- range $bundle := $.RemoteBundles}}
set runtimepath+={{pathjoin $.DeployDir $bundle.Name}}
{{- end}}
{{- range $bundle := $.LocalBundles}}
set runtimepath+={{pathjoin $.DeployDir $bundle.GetName}}
{{- end}}
`
	vimscriptTemplate = template.Must(template.New("vim-script").
		Funcs(template.FuncMap{
			"pathjoin": func(elem ...string) string {
				return filepath.Join(elem...)
			},
		}).
		Parse(templateText),
	)
}

func defaultRuntimepath(errOut io.Writer) (string, error) {
	buf := new(bytes.Buffer)

	// vim -u NONE -i NONE -n -N --cmd "echo &runtimepath" --cmd "q!" 3>&1 1>&2 2>&3 3>&-
	cmd := exec.Command("vim", "--not-a-term", "-N", "-n", "--noplugin", "-i", "NONE", "-u", "NONE", "-U", "NONE", "--cmd", "echo &runtimepath", "--cmd", "q!")
	cmd.Stdout = ioutil.Discard
	cmd.Stderr = buf
	if err := cmd.Run(); err != nil {
		return "", err
	}
	return strings.TrimSpace(buf.String()), nil
}

func deployAction(c *cli.Context) error {
	har := c.App.Metadata["hariti"].(*hariti.Hariti)

	var w io.Writer
	if ofile := c.String("output"); ofile == "-" {
		w = c.App.Writer
	} else {
		fw, err := os.Create(ofile)
		if err != nil {
			return cli.NewExitError(err, 128)
		}
		defer fw.Close()
		w = fw
	}

	defRtp, err := defaultRuntimepath(c.App.ErrWriter)
	if err != nil {
		return cli.NewExitError(err, 1)
	}

	bundles, err := har.List()
	if err != nil {
		return cli.NewExitError(err, 1)
	}
	rbundles := make([]*hariti.RemoteBundle, 0)
	lbundles := make([]*hariti.LocalBundle, 0)
	for _, bundle := range bundles {
		switch v := bundle.(type) {
		case *hariti.RemoteBundle:
			rbundles = append(rbundles, v)
		case *hariti.LocalBundle:
			lbundles = append(lbundles, v)
		}
	}
	data := map[string]interface{}{
		"Version":            c.App.Version,
		"DefaultRuntimepath": defRtp,
		"DeployDir":          har.DeployDir(),
		"RemoteBundles":      rbundles,
		"LocalBundles":       lbundles,
	}
	if err = vimscriptTemplate.Execute(w, data); err != nil {
		return cli.NewExitError(err, 1)
	}
	return nil
}

func init() {
	Commands = append(Commands, cli.Command{
		Name:      "deploy",
		Usage:     "Generate vim script for setting-up runtimepath",
		ArgsUsage: "{bundles file}",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "output,o",
				Usage: "Output `FILE`",
				Value: "-",
			},
		},
		Action: deployAction,
	})
}
